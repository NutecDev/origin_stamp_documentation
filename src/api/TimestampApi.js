/**
 * OriginStamp Documentation
 * The following documentation describes the API v3 for OriginStamp. OriginStamp is a trusted timestamping service that uses the decentralized blockchain to store anonymous, tamper-proof timestamps for any digital content. OriginStamp allows users to timestamp files, emails, or plain text, and subsequently store the created hashes in the blockchain as well as retrieve and verify timetamps that have been committed to the blockchain.The trusted timestamping service of OriginStamp allows you to generate a hash fingerprint and prove that it was created at a specific point in time. If you are interested in integrating trusted timestamping into your own project, feel free to use our provided API. The following interactive documentation describes the interfaces and supports your integration. With this documentation you are able to try out the different requests and see the responses. For the authorization, add your API key to the Authorization header of your request.<br/><h2>Pricing</h2><p>The invoice is based on your individual usage. The following table illustrates the request types, that are billed in credits.</p><table><tr><th>Request Type</th><th>Condition</th><th>Credits</th><tr><td style='border-bottom-style:solid; border-color: #c0c0c0;'></td><td style='border-bottom-style:solid; border-color: #c0c0c0;'></td><td style='border-bottom-style:solid; border-color: #c0c0c0;'></td><tr><th>Submission</th><th>create timestamp</th><th>1 Credit</th><tr><th>Submission</th><th>timestamp already exists</th><th>0.3 Credits</th><tr><th>Status</th><th>no timestamp information available</th><th>0.1 Credit</th><tr><th>Status</th><th>timestamp information</th><th>0.3 Credits</th><tr><th>Proof</th><th>no proof available</th><th>0.1 Credits</th><tr><th>Proof</th><th>merkle tree as proof</th><th>3 Credits</th><tr><th>Proof</th><th>seed as proof</th><th>3 Credits</th><tr><th>Proof</th><th>PDF Certificate</th><th>5 Credits</th><tr><th>Notification</th><th>webhook notification</th><th>1.5 Credits</th><tr><th>Notification</th><th>mail notification</th><th>5 Credits</th><tr><th>Notification</th><th>trigger webhook</th><th>0.3 Credits</th></table><br/><h2>Timestamping Steps</h2><ol><li><strong>Determine Hash: </strong> Calculate the SHA-256 of your record using a cryptographic library.</li><li><strong>Create Timestamp: </strong>Create a timestamp and add meta information to index it, e.g. a comment. You can also request a notification (email or webhook) once the tamper-proof timestamp has been created.</li><li><strong>Archive original file: </strong>Since we have no access to your original data, you should archive it because the timestamp is only valid in combination with the original file.</li><li><strong>Check Timestamp Status: </strong>Since the timestamps are always transmitted to the blockchain network at certain times, i.e. there is a delay, you can check the status of a hash and thus get the timestamp information.</li><li><strong>Get Timestamp Proof: </strong>As soon as the tamper-proof timestamp has been generated, you should archive the proof (Merkle Tree), which we created in our open procedure, together with the original file. With this proof, the existence of the file can be verified independently of OriginStamp. Here you can choose if the raw proof (xml) is sufficient proof or if you want to have a certificate (pdf).</li></ol><br/><h2>Installation Notes</h2><ul><li>Make sure you set the Authorization header correctly using your API key.</li><li>If a Cloudflare error occurs, please set a custom UserAgent header.</li><li>Please have a look at the models below to find out what each field means.</li></ul>
 *
 * OpenAPI spec version: 3.0
 * Contact: mail@originstamp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultTimestampResponse', 'model/DefaultUsageResponse', 'model/TimestampRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DefaultTimestampResponse'), require('../model/DefaultUsageResponse'), require('../model/TimestampRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.OriginStampDocumentation) {
      root.OriginStampDocumentation = {};
    }
    root.OriginStampDocumentation.TimestampApi = factory(root.OriginStampDocumentation.ApiClient, root.OriginStampDocumentation.DefaultTimestampResponse, root.OriginStampDocumentation.DefaultUsageResponse, root.OriginStampDocumentation.TimestampRequest);
  }
}(this, function(ApiClient, DefaultTimestampResponse, DefaultUsageResponse, TimestampRequest) {
  'use strict';

  /**
   * Timestamp service.
   * @module api/TimestampApi
   * @version 3.0
   */

  /**
   * Constructs a new TimestampApi. 
   * @alias module:api/TimestampApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTimestamp operation.
     * @callback module:api/TimestampApi~createTimestampCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultTimestampResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submission
     * You can submit your hash with this function. If your api key is valid, your hash is added to batch and is scheduled for timestamping. If the hash already exists, the created flag in the response is set to false and the notification(s) of the current request will be totally ignored. You are also able to submit additional information, such as comment or notification credentials. Once a hash is successfully created for a certain crypto-currency, we can notify your desired target with the timestamp information (POST Request). The webhook is triggered as soon as the tamper-proof timestamp with the selected crypto currency has been created. Additionally, it is possible to include a preprint URL in the hash submission. Before the generation of the timestamp hash you can create a random UUID Version 4 and include https://originstamp.com/u/UUID where UUID is your UUID e.g. in a document you want to timestamp. In the preprint URL field you include your UUID and then it is possible to verify the timestamp within the document (or whatever). 
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/TimestampRequest} timestampRequest DTO for the hash submission. Add all relevant information concerning your hash submission.
     * @param {module:api/TimestampApi~createTimestampCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultTimestampResponse}
     */
    this.createTimestamp = function(authorization, timestampRequest, callback) {
      var postBody = timestampRequest;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createTimestamp");
      }

      // verify the required parameter 'timestampRequest' is set
      if (timestampRequest === undefined || timestampRequest === null) {
        throw new Error("Missing the required parameter 'timestampRequest' when calling createTimestamp");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultTimestampResponse;

      return this.apiClient.callApi(
        '/v3/timestamp/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKeyUsage operation.
     * @callback module:api/TimestampApi~getApiKeyUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Usage
     * With this interface you can receive the current api usage.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:api/TimestampApi~getApiKeyUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultUsageResponse}
     */
    this.getApiKeyUsage = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getApiKeyUsage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = DefaultUsageResponse;

      return this.apiClient.callApi(
        '/v3/api_key/usage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHashStatus operation.
     * @callback module:api/TimestampApi~getHashStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultTimestampResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status
     * The request returns information of a certain hash read from the URL parameter. The input parameter is a hash in hex representation. Field \&quot;created\&quot; always set to false.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {String} hashString The hash in string representation.
     * @param {module:api/TimestampApi~getHashStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultTimestampResponse}
     */
    this.getHashStatus = function(authorization, hashString, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHashStatus");
      }

      // verify the required parameter 'hashString' is set
      if (hashString === undefined || hashString === null) {
        throw new Error("Missing the required parameter 'hashString' when calling getHashStatus");
      }


      var pathParams = {
        'hash_string': hashString
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DefaultTimestampResponse;

      return this.apiClient.callApi(
        '/v3/timestamp/{hash_string}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
