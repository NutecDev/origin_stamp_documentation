/**
 * OriginStamp Documentation
 * The following documentation describes the API v3 for OriginStamp. OriginStamp is a trusted timestamping service that uses the decentralized blockchain to store anonymous, tamper-proof timestamps for any digital content. OriginStamp allows users to timestamp files, emails, or plain text, and subsequently store the created hashes in the blockchain as well as retrieve and verify timetamps that have been committed to the blockchain.The trusted timestamping service of OriginStamp allows you to generate a hash fingerprint and prove that it was created at a specific point in time. If you are interested in integrating trusted timestamping into your own project, feel free to use our provided API. The following interactive documentation describes the interfaces and supports your integration. With this documentation you are able to try out the different requests and see the responses. For the authorization, add your API key to the Authorization header of your request.<br/><h2>Pricing</h2><p>The invoice is based on your individual usage. The following table illustrates the request types, that are billed in credits.</p><table><tr><th>Request Type</th><th>Condition</th><th>Credits</th><tr><td style='border-bottom-style:solid; border-color: #c0c0c0;'></td><td style='border-bottom-style:solid; border-color: #c0c0c0;'></td><td style='border-bottom-style:solid; border-color: #c0c0c0;'></td><tr><th>Submission</th><th>create timestamp</th><th>1 Credit</th><tr><th>Submission</th><th>timestamp already exists</th><th>0.3 Credits</th><tr><th>Status</th><th>no timestamp information available</th><th>0.1 Credit</th><tr><th>Status</th><th>timestamp information</th><th>0.3 Credits</th><tr><th>Proof</th><th>no proof available</th><th>0.1 Credits</th><tr><th>Proof</th><th>merkle tree as proof</th><th>3 Credits</th><tr><th>Proof</th><th>seed as proof</th><th>3 Credits</th><tr><th>Proof</th><th>PDF Certificate</th><th>5 Credits</th><tr><th>Notification</th><th>webhook notification</th><th>1.5 Credits</th><tr><th>Notification</th><th>mail notification</th><th>5 Credits</th><tr><th>Notification</th><th>trigger webhook</th><th>0.3 Credits</th></table><br/><h2>Timestamping Steps</h2><ol><li><strong>Determine Hash: </strong> Calculate the SHA-256 of your record using a cryptographic library.</li><li><strong>Create Timestamp: </strong>Create a timestamp and add meta information to index it, e.g. a comment. You can also request a notification (email or webhook) once the tamper-proof timestamp has been created.</li><li><strong>Archive original file: </strong>Since we have no access to your original data, you should archive it because the timestamp is only valid in combination with the original file.</li><li><strong>Check Timestamp Status: </strong>Since the timestamps are always transmitted to the blockchain network at certain times, i.e. there is a delay, you can check the status of a hash and thus get the timestamp information.</li><li><strong>Get Timestamp Proof: </strong>As soon as the tamper-proof timestamp has been generated, you should archive the proof (Merkle Tree), which we created in our open procedure, together with the original file. With this proof, the existence of the file can be verified independently of OriginStamp. Here you can choose if the raw proof (xml) is sufficient proof or if you want to have a certificate (pdf).</li></ol><br/><h2>Installation Notes</h2><ul><li>Make sure you set the Authorization header correctly using your API key.</li><li>If a Cloudflare error occurs, please set a custom UserAgent header.</li><li>Please have a look at the models below to find out what each field means.</li></ul>
 *
 * OpenAPI spec version: 3.0
 * Contact: mail@originstamp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultDownloadLinkResponse', 'model/DefaultSchedulerResponse', 'model/DefaultTimestampResponse', 'model/DefaultUsageResponse', 'model/DefaultWebhookResponse', 'model/DownloadLinkResponse', 'model/ManualWebhookRequest', 'model/ModelDefault', 'model/Notification', 'model/ProofRequest', 'model/SchedulerRequest', 'model/SchedulerResponse', 'model/TimestampData', 'model/TimestampRequest', 'model/TimestampResponse', 'model/UsageResponse', 'model/WebhookRequest', 'model/WebhookResponse', 'api/ProofApi', 'api/SchedulerApi', 'api/TimestampApi', 'api/WebhookApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/DefaultDownloadLinkResponse'), require('./model/DefaultSchedulerResponse'), require('./model/DefaultTimestampResponse'), require('./model/DefaultUsageResponse'), require('./model/DefaultWebhookResponse'), require('./model/DownloadLinkResponse'), require('./model/ManualWebhookRequest'), require('./model/ModelDefault'), require('./model/Notification'), require('./model/ProofRequest'), require('./model/SchedulerRequest'), require('./model/SchedulerResponse'), require('./model/TimestampData'), require('./model/TimestampRequest'), require('./model/TimestampResponse'), require('./model/UsageResponse'), require('./model/WebhookRequest'), require('./model/WebhookResponse'), require('./api/ProofApi'), require('./api/SchedulerApi'), require('./api/TimestampApi'), require('./api/WebhookApi'));
  }
}(function(ApiClient, DefaultDownloadLinkResponse, DefaultSchedulerResponse, DefaultTimestampResponse, DefaultUsageResponse, DefaultWebhookResponse, DownloadLinkResponse, ManualWebhookRequest, ModelDefault, Notification, ProofRequest, SchedulerRequest, SchedulerResponse, TimestampData, TimestampRequest, TimestampResponse, UsageResponse, WebhookRequest, WebhookResponse, ProofApi, SchedulerApi, TimestampApi, WebhookApi) {
  'use strict';

  /**
   * The_following_documentation_describes_the_API_v3_for_OriginStamp__OriginStamp_is_a_trusted_timestamping_service_that_uses_the_decentralized_blockchain_to_store_anonymous_tamper_proof_timestamps_for_any_digital_content__OriginStamp_allows_users_to_timestamp_files_emails_or_plain_text_and_subsequently_store_the_created_hashes_in_the_blockchain_as_well_as_retrieve_and_verify_timetamps_that_have_been_committed_to_the_blockchain_The_trusted_timestamping_service_of_OriginStamp_allows_you_to_generate_a_hash_fingerprint_and_prove_that_it_was_created_at_a_specific_point_in_time__If_you_are_interested_in_integrating_trusted_timestamping_into_your_own_project_feel_free_to_use_our_provided_API__The_following_interactive_documentation_describes_the_interfaces_and_supports_your_integration__With_this_documentation_you_are_able_to_try_out_the_different_requests_and_see_the_responses__For_the_authorization_add_your_API_key_to_the_Authorization_header_of_your_request_brh2Pricingh2pThe_invoice_is_based_on_your_individual_usage__The_following_table_illustrates_the_request_types_that_are_billed_in_credits_ptabletrthRequest_TypeththConditionththCreditsthtrtd_styleborder_bottom_stylesolid_border_color_c0c0c0tdtd_styleborder_bottom_stylesolid_border_color_c0c0c0tdtd_styleborder_bottom_stylesolid_border_color_c0c0c0tdtrthSubmissionththcreate_timestampthth1_CreditthtrthSubmissionththtimestamp_already_existsthth0_3_CreditsthtrthStatusththno_timestamp_information_availablethth0_1_CreditthtrthStatusththtimestamp_informationthth0_3_CreditsthtrthProofththno_proof_availablethth0_1_CreditsthtrthProofththmerkle_tree_as_proofthth3_CreditsthtrthProofththseed_as_proofthth3_CreditsthtrthProofththPDF_Certificatethth5_CreditsthtrthNotificationththwebhook_notificationthth1_5_CreditsthtrthNotificationththmail_notificationthth5_CreditsthtrthNotificationththtrigger_webhookthth0_3_Creditsthtablebrh2Timestamping_Stepsh2ollistrongDetermine_Hash_strong_Calculate_the_SHA_256_of_your_record_using_a_cryptographic_library_lilistrongCreate_Timestamp_strongCreate_a_timestamp_and_add_meta_information_to_index_it_e_g__a_comment__You_can_also_request_a_notification__email_or_webhook_once_the_tamper_proof_timestamp_has_been_created_lilistrongArchive_original_file_strongSince_we_have_no_access_to_your_original_data_you_should_archive_it_because_the_timestamp_is_only_valid_in_combination_with_the_original_file_lilistrongCheck_Timestamp_Status_strongSince_the_timestamps_are_always_transmitted_to_the_blockchain_network_at_certain_times_i_e__there_is_a_delay_you_can_check_the_status_of_a_hash_and_thus_get_the_timestamp_information_lilistrongGet_Timestamp_Proof_strongAs_soon_as_the_tamper_proof_timestamp_has_been_generated_you_should_archive_the_proof__Merkle_Tree_which_we_created_in_our_open_procedure_together_with_the_original_file__With_this_proof_the_existence_of_the_file_can_be_verified_independently_of_OriginStamp__Here_you_can_choose_if_the_raw_proof__xml_is_sufficient_proof_or_if_you_want_to_have_a_certificate__pdf_liolbrh2Installation_Notesh2ulliMake_sure_you_set_the_Authorization_header_correctly_using_your_API_key_liliIf_a_Cloudflare_error_occurs_please_set_a_custom_UserAgent_header_liliPlease_have_a_look_at_the_models_below_to_find_out_what_each_field_means_liul.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var OriginStampDocumentation = require('index'); // See note below*.
   * var xxxSvc = new OriginStampDocumentation.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new OriginStampDocumentation.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new OriginStampDocumentation.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new OriginStampDocumentation.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 3.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The DefaultDownloadLinkResponse model constructor.
     * @property {module:model/DefaultDownloadLinkResponse}
     */
    DefaultDownloadLinkResponse: DefaultDownloadLinkResponse,
    /**
     * The DefaultSchedulerResponse model constructor.
     * @property {module:model/DefaultSchedulerResponse}
     */
    DefaultSchedulerResponse: DefaultSchedulerResponse,
    /**
     * The DefaultTimestampResponse model constructor.
     * @property {module:model/DefaultTimestampResponse}
     */
    DefaultTimestampResponse: DefaultTimestampResponse,
    /**
     * The DefaultUsageResponse model constructor.
     * @property {module:model/DefaultUsageResponse}
     */
    DefaultUsageResponse: DefaultUsageResponse,
    /**
     * The DefaultWebhookResponse model constructor.
     * @property {module:model/DefaultWebhookResponse}
     */
    DefaultWebhookResponse: DefaultWebhookResponse,
    /**
     * The DownloadLinkResponse model constructor.
     * @property {module:model/DownloadLinkResponse}
     */
    DownloadLinkResponse: DownloadLinkResponse,
    /**
     * The ManualWebhookRequest model constructor.
     * @property {module:model/ManualWebhookRequest}
     */
    ManualWebhookRequest: ManualWebhookRequest,
    /**
     * The ModelDefault model constructor.
     * @property {module:model/ModelDefault}
     */
    ModelDefault: ModelDefault,
    /**
     * The Notification model constructor.
     * @property {module:model/Notification}
     */
    Notification: Notification,
    /**
     * The ProofRequest model constructor.
     * @property {module:model/ProofRequest}
     */
    ProofRequest: ProofRequest,
    /**
     * The SchedulerRequest model constructor.
     * @property {module:model/SchedulerRequest}
     */
    SchedulerRequest: SchedulerRequest,
    /**
     * The SchedulerResponse model constructor.
     * @property {module:model/SchedulerResponse}
     */
    SchedulerResponse: SchedulerResponse,
    /**
     * The TimestampData model constructor.
     * @property {module:model/TimestampData}
     */
    TimestampData: TimestampData,
    /**
     * The TimestampRequest model constructor.
     * @property {module:model/TimestampRequest}
     */
    TimestampRequest: TimestampRequest,
    /**
     * The TimestampResponse model constructor.
     * @property {module:model/TimestampResponse}
     */
    TimestampResponse: TimestampResponse,
    /**
     * The UsageResponse model constructor.
     * @property {module:model/UsageResponse}
     */
    UsageResponse: UsageResponse,
    /**
     * The WebhookRequest model constructor.
     * @property {module:model/WebhookRequest}
     */
    WebhookRequest: WebhookRequest,
    /**
     * The WebhookResponse model constructor.
     * @property {module:model/WebhookResponse}
     */
    WebhookResponse: WebhookResponse,
    /**
     * The ProofApi service constructor.
     * @property {module:api/ProofApi}
     */
    ProofApi: ProofApi,
    /**
     * The SchedulerApi service constructor.
     * @property {module:api/SchedulerApi}
     */
    SchedulerApi: SchedulerApi,
    /**
     * The TimestampApi service constructor.
     * @property {module:api/TimestampApi}
     */
    TimestampApi: TimestampApi,
    /**
     * The WebhookApi service constructor.
     * @property {module:api/WebhookApi}
     */
    WebhookApi: WebhookApi
  };

  return exports;
}));
